-- Generated by Oracle SQL Developer Data Modeler 19.1.0.081.0911
--   at:        2019-04-29 11:52:27 CEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



CREATE TABLE contract (
    id            NUMBER NOT NULL,
    customer_id   NUMBER NOT NULL
);

ALTER TABLE contract ADD CONSTRAINT contract_pk PRIMARY KEY ( id );

CREATE TABLE customer (
    customer_id       NUMBER NOT NULL,
    imie              VARCHAR2(30) DEFAULT 'LastName A' NOT NULL,
    nazwisko          VARCHAR2(30) DEFAULT 'LastName B' NOT NULL,
    pesel_number      NUMBER(11) NOT NULL,
    identity_number   VARCHAR2(9) NOT NULL,
    mail              VARCHAR2(30),
    adrescode         NUMBER(5),
    adrescountry      VARCHAR2(30),
    adresstreet       VARCHAR2(30),
    adresnumber       NUMBER,
    adreshomeadres    NUMBER
);

ALTER TABLE customer ADD CONSTRAINT customer_pk PRIMARY KEY ( customer_id );

ALTER TABLE customer
    ADD CONSTRAINT customer__un UNIQUE ( customer_id,
                                         pesel_number,
                                         identity_number );

CREATE TABLE dokuments (
    doc_id            NUMBER NOT NULL,
    telephonenumber   NUMBER(9) NOT NULL,
    imagescan         VARCHAR2(30),
    opis              CLOB,
    customer_id       NUMBER NOT NULL
);

ALTER TABLE dokuments ADD CONSTRAINT dokuments_pk PRIMARY KEY ( doc_id );

ALTER TABLE dokuments ADD CONSTRAINT dokuments__un UNIQUE ( doc_id );

CREATE TABLE doladowanie (
    boost_id       NUMBER NOT NULL,
    saldo          NUMBER(8, 2),
    numeruzyty     NUMBER(9) DEFAULT 0 NOT NULL,
    datazakupu     DATE,
    datauzycia     DATE DEFAULT '1970-01-01',
    serialnumber   NUMBER NOT NULL,
    status         VARCHAR2(30) DEFAULT 'Aktywny' NOT NULL
);

ALTER TABLE doladowanie ADD CONSTRAINT do³adowanie_pk PRIMARY KEY ( boost_id );

ALTER TABLE doladowanie ADD CONSTRAINT doladowanie__un UNIQUE ( boost_id,
                                                                serialnumber );

CREATE TABLE employee (
    employee_id         NUMBER NOT NULL,
    imie                VARCHAR2(30) DEFAULT 'LastNameA' NOT NULL,
    nazwisko            VARCHAR2(30) DEFAULT 'LastNameB' NOT NULL,
    stanowisko          VARCHAR2(20) NOT NULL,
    lokalizacja         VARCHAR2(20) NOT NULL,
    przelozony          VARCHAR2(30),
    data_zatrudnienia   DATE NOT NULL,
    data_kontraktu      DATE
);

ALTER TABLE employee ADD CONSTRAINT employee_pk PRIMARY KEY ( employee_id );

ALTER TABLE employee ADD CONSTRAINT employee__un UNIQUE ( employee_id );

CREATE TABLE globalproblem (
    global_problem_id   NUMBER NOT NULL,
    opis                CLOB,
    datarozpoczecia     DATE,
    datazakonczenia     DATE,
    rodzaj_id           NUMBER NOT NULL
);

ALTER TABLE globalproblem ADD CONSTRAINT globalproblem_pk PRIMARY KEY ( global_problem_id );

ALTER TABLE globalproblem ADD CONSTRAINT globalproblem__un UNIQUE ( global_problem_id );

CREATE TABLE globalproblemnumber (
    global_problem_number_id   NUMBER NOT NULL,
    telephonenumber            NUMBER(9) NOT NULL,
    global_problemnum_id       NUMBER NOT NULL
);

ALTER TABLE globalproblemnumber ADD CONSTRAINT globalproblemnumber__un UNIQUE ( global_problem_number_id );

CREATE TABLE listconnections (
    list_connections_id   NUMBER NOT NULL,
    telephone_number      NUMBER(9) NOT NULL,
    datecalculation       DATE NOT NULL,
    typ                   NUMBER NOT NULL,
    target_number         NUMBER(9),
    calculation           NUMBER(9, 2) DEFAULT 0.00 NOT NULL,
    balancebefore         NUMBER(9, 3) NOT NULL,
    balanceafter          NUMBER(9, 3) NOT NULL
);

ALTER TABLE listconnections ADD CONSTRAINT listconnections_pk PRIMARY KEY ( list_connections_id );

ALTER TABLE listconnections ADD CONSTRAINT listconnections__un UNIQUE ( list_connections_id );

CREATE TABLE login (
    employee_id       NUMBER NOT NULL,
    loginemployer     VARCHAR2(30) NOT NULL,
    passwd            VARCHAR2(30) NOT NULL,
    poziomuprawnien   NUMBER NOT NULL,
    datahasla         DATE NOT NULL
);

ALTER TABLE login ADD CONSTRAINT login_pk PRIMARY KEY ( employee_id );

ALTER TABLE login ADD CONSTRAINT login__un UNIQUE ( loginemployer,
                                                    employee_id );

CREATE TABLE paczkapakietow (
    pack_packet_id      NUMBER NOT NULL,
    cykl                NUMBER DEFAULT 0 NOT NULL,
    kwota               NUMBER(4, 2) DEFAULT 0.00 NOT NULL,
    pakiet_package_id   NUMBER NOT NULL
);

ALTER TABLE paczkapakietow ADD CONSTRAINT paczkapakietow_pk PRIMARY KEY ( pack_packet_id );

CREATE TABLE pakiet (
    package_id   NUMBER NOT NULL,
    nazwa        VARCHAR2(30) NOT NULL,
    kod_oferty   VARCHAR2(10) NOT NULL,
    opis         CLOB,
    taryfa       VARCHAR2(10) NOT NULL,
    cena         NUMBER(9, 2) DEFAULT 0.00 NOT NULL
);

ALTER TABLE pakiet ADD CONSTRAINT package_pk PRIMARY KEY ( package_id );

ALTER TABLE pakiet ADD CONSTRAINT pakiet__un UNIQUE ( package_id,
                                                      kod_oferty );

CREATE TABLE platnosci (
    payment_id       NUMBER NOT NULL,
    kwotadozaplaty   NUMBER(9, 2),
    datanaliczenia   DATE,
    pack_packet_id   NUMBER NOT NULL,
    contract_id      NUMBER NOT NULL
);

ALTER TABLE platnosci ADD CONSTRAINT platnosci_pk PRIMARY KEY ( payment_id );

CREATE TABLE product (
    product_id     NUMBER NOT NULL,
    nazwa          VARCHAR2(30),
    opis           CLOB,
    producent      VARCHAR2(30),
    rokprodukcji   DATE,
    ilosc          NUMBER DEFAULT 0
);

ALTER TABLE product ADD CONSTRAINT product_pk PRIMARY KEY ( product_id );

ALTER TABLE product ADD CONSTRAINT product__un UNIQUE ( product_id );

CREATE TABLE sprzedaz (
    sale_id           NUMBER NOT NULL,
    telephonenumber   NUMBER(9) NOT NULL,
    customer_id       NUMBER NOT NULL,
    employee_id       NUMBER NOT NULL,
    product_id        NUMBER NOT NULL,
    ilosc_produktu    NUMBER NOT NULL
);

ALTER TABLE sprzedaz ADD CONSTRAINT sprzedaz_pk PRIMARY KEY ( sale_id );

ALTER TABLE sprzedaz ADD CONSTRAINT sprzedaz__un UNIQUE ( sale_id );

CREATE TABLE technikalproblem (
    technikal_problem_id        NUMBER NOT NULL,
    datazgloszenia              DATE,
    przewidywanadatawykonania   DATE,
    opis                        CLOB,
    telephonenumber             NUMBER(9) NOT NULL,
    rodzaj_uslugi_id            NUMBER NOT NULL
);

ALTER TABLE technikalproblem ADD CONSTRAINT technikalproblem_pk PRIMARY KEY ( technikal_problem_id );

ALTER TABLE technikalproblem ADD CONSTRAINT technikalproblem__un UNIQUE ( technikal_problem_id );

CREATE TABLE telephonenumber (
    telephone_number_id   NUMBER NOT NULL,
    "Number"              NUMBER(9) NOT NULL,
    contract_id           NUMBER NOT NULL,
    status                VARCHAR2(30) DEFAULT 'Aktywny',
    dateactivated         DATE DEFAULT '1970-01-01',
    dateexpiration        DATE DEFAULT '1970-01-01' NOT NULL,
    balance               NUMBER(8, 2),
    internetbalance       NUMBER(9, 3),
    callbalance           NUMBER(9, 2),
    smsbalance            NUMBER(9),
    telephonemodel        VARCHAR2(30)
);

ALTER TABLE telephonenumber ADD CONSTRAINT telephonenumber_pk PRIMARY KEY ( "Number" );

ALTER TABLE telephonenumber
    ADD CONSTRAINT telephonenumber__un UNIQUE ( telephone_number_id,
                                                "Number",
                                                contract_id );

CREATE TABLE ticklery (
    tickler_id               NUMBER NOT NULL,
    opis                     VARCHAR2(30 CHAR),
    datadodania              DATE,
    typ_id_typ               NUMBER NOT NULL,
    telephonenumber_number   NUMBER(9) NOT NULL,
    employe_id               NUMBER NOT NULL
);

ALTER TABLE ticklery ADD CONSTRAINT ticklery_pk PRIMARY KEY ( tickler_id );

ALTER TABLE ticklery ADD CONSTRAINT ticklery__un UNIQUE ( tickler_id );

CREATE TABLE typ (
    id_typ   NUMBER NOT NULL,
    nazwa    VARCHAR2(30) NOT NULL
);

ALTER TABLE typ ADD CONSTRAINT typ_pk PRIMARY KEY ( id_typ );

ALTER TABLE typ ADD CONSTRAINT typ__un UNIQUE ( id_typ,
                                                nazwa );

CREATE TABLE typ_connections (
    id          NUMBER NOT NULL,
    nazwa_typ   VARCHAR2(30) NOT NULL
);

ALTER TABLE typ_connections ADD CONSTRAINT typ_connections_pk PRIMARY KEY ( id );

ALTER TABLE typ_connections ADD CONSTRAINT typ_connections__un UNIQUE ( id,
                                                                        nazwa_typ );

CREATE TABLE usluga (
    id      NUMBER NOT NULL,
    nazwa   VARCHAR2(30) NOT NULL
);

ALTER TABLE usluga ADD CONSTRAINT usluga_pk PRIMARY KEY ( id );

ALTER TABLE usluga ADD CONSTRAINT usluga__un UNIQUE ( id,
                                                      nazwa );

ALTER TABLE contract
    ADD CONSTRAINT contract_customer_fk FOREIGN KEY ( customer_id )
        REFERENCES customer ( customer_id );

ALTER TABLE dokuments
    ADD CONSTRAINT dokuments_customer_fk FOREIGN KEY ( customer_id )
        REFERENCES customer ( customer_id );

ALTER TABLE globalproblem
    ADD CONSTRAINT globalproblem_usluga_fk FOREIGN KEY ( rodzaj_id )
        REFERENCES usluga ( id );

ALTER TABLE globalproblemnumber
    ADD CONSTRAINT globalproblemnumber_fk FOREIGN KEY ( global_problemnum_id )
        REFERENCES globalproblem ( global_problem_id );

ALTER TABLE listconnections
    ADD CONSTRAINT listconnections_fk FOREIGN KEY ( telephone_number )
        REFERENCES telephonenumber ( "Number" );

ALTER TABLE listconnections
    ADD CONSTRAINT listconnections_typ_fk FOREIGN KEY ( typ )
        REFERENCES typ_connections ( id );

ALTER TABLE login
    ADD CONSTRAINT login_employee_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( employee_id );

ALTER TABLE doladowanie
    ADD CONSTRAINT numeruzyty FOREIGN KEY ( numeruzyty )
        REFERENCES telephonenumber ( "Number" );

ALTER TABLE paczkapakietow
    ADD CONSTRAINT paczkapakietow_pakiet_fk FOREIGN KEY ( pakiet_package_id )
        REFERENCES pakiet ( package_id );

ALTER TABLE platnosci
    ADD CONSTRAINT platnosci_contract_fk FOREIGN KEY ( contract_id )
        REFERENCES contract ( id );

ALTER TABLE platnosci
    ADD CONSTRAINT platnosci_paczkapakietow_fk FOREIGN KEY ( pack_packet_id )
        REFERENCES paczkapakietow ( pack_packet_id );

ALTER TABLE sprzedaz
    ADD CONSTRAINT sprzedaz_customer_fk FOREIGN KEY ( customer_id )
        REFERENCES customer ( customer_id );

ALTER TABLE sprzedaz
    ADD CONSTRAINT sprzedaz_employee_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( employee_id );

ALTER TABLE sprzedaz
    ADD CONSTRAINT sprzedaz_product_fk FOREIGN KEY ( product_id )
        REFERENCES product ( product_id );

ALTER TABLE sprzedaz
    ADD CONSTRAINT sprzedaz_telephonenumber_fk FOREIGN KEY ( telephonenumber )
        REFERENCES telephonenumber ( "Number" );

ALTER TABLE technikalproblem
    ADD CONSTRAINT technikalproblem_number_fk FOREIGN KEY ( telephonenumber )
        REFERENCES telephonenumber ( "Number" );

ALTER TABLE technikalproblem
    ADD CONSTRAINT technikalproblem_usluga_fk FOREIGN KEY ( rodzaj_uslugi_id )
        REFERENCES usluga ( id );

ALTER TABLE globalproblemnumber
    ADD CONSTRAINT telephone_number_fk FOREIGN KEY ( telephonenumber )
        REFERENCES telephonenumber ( "Number" );

ALTER TABLE dokuments
    ADD CONSTRAINT telephonenumber FOREIGN KEY ( telephonenumber )
        REFERENCES telephonenumber ( "Number" );

ALTER TABLE telephonenumber
    ADD CONSTRAINT telephonenumber_contract_fk FOREIGN KEY ( contract_id )
        REFERENCES contract ( id );

ALTER TABLE ticklery
    ADD CONSTRAINT ticklery_employee_fk FOREIGN KEY ( employe_id )
        REFERENCES employee ( employee_id );

ALTER TABLE ticklery
    ADD CONSTRAINT ticklery_telephonenumber_fk FOREIGN KEY ( telephonenumber_number )
        REFERENCES telephonenumber ( "Number" );

ALTER TABLE ticklery
    ADD CONSTRAINT ticklery_typ_fk FOREIGN KEY ( typ_id_typ )
        REFERENCES typ ( id_typ );

CREATE SEQUENCE contract_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER contract_id_trg BEFORE
    INSERT ON contract
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := contract_id_seq.nextval;
END;
/

CREATE SEQUENCE customer_customer_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER customer_customer_id_trg BEFORE
    INSERT ON customer
    FOR EACH ROW
    WHEN ( new.customer_id IS NULL )
BEGIN
    :new.customer_id := customer_customer_id_seq.nextval;
END;
/

CREATE SEQUENCE dokuments_doc_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER dokuments_doc_id_trg BEFORE
    INSERT ON dokuments
    FOR EACH ROW
    WHEN ( new.doc_id IS NULL )
BEGIN
    :new.doc_id := dokuments_doc_id_seq.nextval;
END;
/

CREATE SEQUENCE doladowanie_boost_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER doladowanie_boost_id_trg BEFORE
    INSERT ON doladowanie
    FOR EACH ROW
    WHEN ( new.boost_id IS NULL )
BEGIN
    :new.boost_id := doladowanie_boost_id_seq.nextval;
END;
/

CREATE SEQUENCE doladowanie_serialnumber_seq START WITH 33000000000000 MAXVALUE 33099999999999 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER doladowanie_serialnumber_trg BEFORE
    INSERT ON doladowanie
    FOR EACH ROW
    WHEN ( new.serialnumber IS NULL )
BEGIN
    :new.serialnumber := doladowanie_serialnumber_seq.nextval;
END;
/

CREATE SEQUENCE employee_employee_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER employee_employee_id_trg BEFORE
    INSERT ON employee
    FOR EACH ROW
    WHEN ( new.employee_id IS NULL )
BEGIN
    :new.employee_id := employee_employee_id_seq.nextval;
END;
/

CREATE SEQUENCE globalproblem_global_problem_i START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER globalproblem_global_problem_i BEFORE
    INSERT ON globalproblem
    FOR EACH ROW
    WHEN ( new.global_problem_id IS NULL )
BEGIN
    :new.global_problem_id := globalproblem_global_problem_i.nextval;
END;
/

CREATE SEQUENCE globalproblemnumber_global_pro START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER globalproblemnumber_global_pro BEFORE
    INSERT ON globalproblemnumber
    FOR EACH ROW
    WHEN ( new.global_problem_number_id IS NULL )
BEGIN
    :new.global_problem_number_id := globalproblemnumber_global_pro.nextval;
END;
/

CREATE SEQUENCE listconnections_list_connectio START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER listconnections_list_connectio BEFORE
    INSERT ON listconnections
    FOR EACH ROW
    WHEN ( new.list_connections_id IS NULL )
BEGIN
    :new.list_connections_id := listconnections_list_connectio.nextval;
END;
/

CREATE SEQUENCE login_employee_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER login_employee_id_trg BEFORE
    INSERT ON login
    FOR EACH ROW
    WHEN ( new.employee_id IS NULL )
BEGIN
    :new.employee_id := login_employee_id_seq.nextval;
END;
/

CREATE SEQUENCE login_loginemployer_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER login_loginemployer_trg BEFORE
    INSERT ON login
    FOR EACH ROW
    WHEN ( new.loginemployer IS NULL )
BEGIN
    :new.loginemployer := login_loginemployer_seq.nextval;
END;
/

CREATE SEQUENCE paczkapakietow_pack_packet_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER paczkapakietow_pack_packet_id BEFORE
    INSERT ON paczkapakietow
    FOR EACH ROW
    WHEN ( new.pack_packet_id IS NULL )
BEGIN
    :new.pack_packet_id := paczkapakietow_pack_packet_id.nextval;
END;
/

CREATE SEQUENCE pakiet_package_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER pakiet_package_id_trg BEFORE
    INSERT ON pakiet
    FOR EACH ROW
    WHEN ( new.package_id IS NULL )
BEGIN
    :new.package_id := pakiet_package_id_seq.nextval;
END;
/

CREATE SEQUENCE platnosci_payment_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER platnosci_payment_id_trg BEFORE
    INSERT ON platnosci
    FOR EACH ROW
    WHEN ( new.payment_id IS NULL )
BEGIN
    :new.payment_id := platnosci_payment_id_seq.nextval;
END;
/

CREATE SEQUENCE product_product_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER product_product_id_trg BEFORE
    INSERT ON product
    FOR EACH ROW
    WHEN ( new.product_id IS NULL )
BEGIN
    :new.product_id := product_product_id_seq.nextval;
END;
/

CREATE SEQUENCE sprzedaz_sale_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER sprzedaz_sale_id_trg BEFORE
    INSERT ON sprzedaz
    FOR EACH ROW
    WHEN ( new.sale_id IS NULL )
BEGIN
    :new.sale_id := sprzedaz_sale_id_seq.nextval;
END;
/

CREATE SEQUENCE technikalproblem_technikal_pro START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER technikalproblem_technikal_pro BEFORE
    INSERT ON technikalproblem
    FOR EACH ROW
    WHEN ( new.technikal_problem_id IS NULL )
BEGIN
    :new.technikal_problem_id := technikalproblem_technikal_pro.nextval;
END;
/

CREATE SEQUENCE telephonenumber_telephone_numb START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER telephonenumber_telephone_numb BEFORE
    INSERT ON telephonenumber
    FOR EACH ROW
    WHEN ( new.telephone_number_id IS NULL )
BEGIN
    :new.telephone_number_id := telephonenumber_telephone_numb.nextval;
END;
/

CREATE SEQUENCE typ_id_typ_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER typ_id_typ_trg BEFORE
    INSERT ON typ
    FOR EACH ROW
    WHEN ( new.id_typ IS NULL )
BEGIN
    :new.id_typ := typ_id_typ_seq.nextval;
END;
/

CREATE SEQUENCE typ_connections_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER typ_connections_id_trg BEFORE
    INSERT ON typ_connections
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := typ_connections_id_seq.nextval;
END;
/

CREATE SEQUENCE usluga_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER usluga_id_trg BEFORE
    INSERT ON usluga
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := usluga_id_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            20
-- CREATE INDEX                             0
-- ALTER TABLE                             59
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          21
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                         21
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
